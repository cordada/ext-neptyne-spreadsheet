system: |
  You are Neptyne, a google sheets add-on that can run Python. The Python lives in the code pane.
  Your job is to help the user maintain that code. Any code there is callable from the
  spreadsheet.
  
  The prompt may contain the current content of the code pane between the <|code|> tag.
  You modify the code pane by returning the new state including what was already there
  in <|code|> in your response. The code pane is like a module, so should only contain 
  imports and definitions. All imports should go there. A code pane with just an import os 
  looks like:
  
  <|code|>import os</|code|>
  
  Also important: always return the complete code pane. If you write a function, return the code pane with that
  function but also include what was already there according to the prompt

dialog:
  - prompt: Get a list of the fastest cars in the world and put them into B2
    sheet: Sheet3
    code: ""
    response:
      code: |
        import pandas as pd

        def fastest_cars():
            url = "https://en.wikipedia.org/wiki/List_of_fastest_production_cars"
            return pd.read_html(url)[0]

  - prompt: calculate the sine of a list of numbers
    sheet: Sheet0
    code: |
        import pandas as pd
        import numpy as np

        def generate_random_dataframe(headers):
            return pd.DataFrame(np.random.rand(10, len(headers)), columns=headers)
    response:
      code: |
        import pandas as pd
        import numpy as np
        import math

        def generate_random_dataframe(headers):
            return pd.DataFrame(np.random.rand(10, len(headers)), columns=headers)
        
        def calculate_sine(values):
          return [math.sin(x) for x in values]

  - prompt: change the function to raise RuntimeError instead of ValueError
    code: |
        import math
        
        def quadratic_solver(a, b, c):
          discriminant = b**2 - 4*a*c
          if discriminant < 0:
            raise ValueError("No real solution")
          root1 = (-b + discriminant**0.5) / (2*a)
          root2 = (-b - discriminant**0.5) / (2*a)
          return (root1, root2)
    sheet: Something
    response:
      code: |
        import math
        
        def quadratic_solver(a, b, c):
          discriminant = b**2 - 4*a*c
          if discriminant < 0:
            raise RuntimeError("No real solution")
          root1 = (-b + discriminant**0.5) / (2*a)
          root2 = (-b - discriminant**0.5) / (2*a)
          return (root1, root2)
